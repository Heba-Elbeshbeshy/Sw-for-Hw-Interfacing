
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000044c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005e0  080005e0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005e0  080005e0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080005e0  080005e0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005e0  080005e0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005e0  080005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005e4  080005e4  000105e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080005e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000028  08000610  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000610  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000be1  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000363  00000000  00000000  00020c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00020fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00021040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000de97  00000000  00000000  000210a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001046  00000000  00000000  0002ef3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fcfc  00000000  00000000  0002ff85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007fc81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  0007fcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005c8 	.word	0x080005c8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	080005c8 	.word	0x080005c8

080001d4 <main>:
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"

unsigned int Segment_Number[10] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
	for(int i=0; i < 7; i++)
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
 80001de:	e008      	b.n	80001f2 <main+0x1e>
	{
	   GPIO_Init('A', i , OUTPUT, PUSH_PULL);
 80001e0:	68f9      	ldr	r1, [r7, #12]
 80001e2:	2300      	movs	r3, #0
 80001e4:	2201      	movs	r2, #1
 80001e6:	2041      	movs	r0, #65	; 0x41
 80001e8:	f000 f87e 	bl	80002e8 <GPIO_Init>
	for(int i=0; i < 7; i++)
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	3301      	adds	r3, #1
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	2b06      	cmp	r3, #6
 80001f6:	ddf3      	ble.n	80001e0 <main+0xc>
	}

  while (1)
  {
	for(int j=0; j <10; j++)
 80001f8:	2300      	movs	r3, #0
 80001fa:	60bb      	str	r3, [r7, #8]
 80001fc:	e01c      	b.n	8000238 <main+0x64>
	{
	   for(int i=0; i < 7; i++)
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e010      	b.n	8000226 <main+0x52>
	    {
	      GPIO_WritePin('A', i, (Segment_Number[j]>>i)&1);
 8000204:	6879      	ldr	r1, [r7, #4]
 8000206:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <main+0x6c>)
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	fa22 f303 	lsr.w	r3, r2, r3
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	461a      	mov	r2, r3
 800021a:	2041      	movs	r0, #65	; 0x41
 800021c:	f000 f946 	bl	80004ac <GPIO_WritePin>
	   for(int i=0; i < 7; i++)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2b06      	cmp	r3, #6
 800022a:	ddeb      	ble.n	8000204 <main+0x30>
	    }
	   delay(1000000);
 800022c:	4805      	ldr	r0, [pc, #20]	; (8000244 <main+0x70>)
 800022e:	f000 f846 	bl	80002be <delay>
	for(int j=0; j <10; j++)
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	3301      	adds	r3, #1
 8000236:	60bb      	str	r3, [r7, #8]
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	2b09      	cmp	r3, #9
 800023c:	dddf      	ble.n	80001fe <main+0x2a>
 800023e:	e7db      	b.n	80001f8 <main+0x24>
 8000240:	20000000 	.word	0x20000000
 8000244:	000f4240 	.word	0x000f4240

08000248 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <SystemInit+0x20>)
 800024e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000252:	4a05      	ldr	r2, [pc, #20]	; (8000268 <SystemInit+0x20>)
 8000254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800026c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000272:	490e      	ldr	r1, [pc, #56]	; (80002ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000278:	e002      	b.n	8000280 <LoopCopyDataInit>

0800027a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800027a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800027c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800027e:	3304      	adds	r3, #4

08000280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000284:	d3f9      	bcc.n	800027a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000286:	4a0b      	ldr	r2, [pc, #44]	; (80002b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000288:	4c0b      	ldr	r4, [pc, #44]	; (80002b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800028c:	e001      	b.n	8000292 <LoopFillZerobss>

0800028e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800028e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000290:	3204      	adds	r2, #4

08000292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000294:	d3fb      	bcc.n	800028e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000296:	f7ff ffd7 	bl	8000248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800029a:	f000 f971 	bl	8000580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800029e:	f7ff ff99 	bl	80001d4 <main>
  bx  lr    
 80002a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80002a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ac:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80002b0:	080005e8 	.word	0x080005e8
  ldr r2, =_sbss
 80002b4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80002b8:	20000044 	.word	0x20000044

080002bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC_IRQHandler>

080002be <delay>:
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"

void delay(int secs)
{for(int i=0; i<secs; i++){}}
 80002be:	b480      	push	{r7}
 80002c0:	b085      	sub	sp, #20
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	e002      	b.n	80002d2 <delay+0x14>
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3301      	adds	r3, #1
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	dbf8      	blt.n	80002cc <delay+0xe>
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	3714      	adds	r7, #20
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <GPIO_Init>:

void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60b9      	str	r1, [r7, #8]
 80002f0:	607a      	str	r2, [r7, #4]
 80002f2:	603b      	str	r3, [r7, #0]
 80002f4:	4603      	mov	r3, r0
 80002f6:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 80002f8:	7bfb      	ldrb	r3, [r7, #15]
 80002fa:	2b41      	cmp	r3, #65	; 0x41
 80002fc:	d002      	beq.n	8000304 <GPIO_Init+0x1c>
 80002fe:	2b42      	cmp	r3, #66	; 0x42
 8000300:	d064      	beq.n	80003cc <GPIO_Init+0xe4>
						GPIOA_OTYPER |= (0x01<<PIN_NO);
					break;
				}
		break;
	}
}
 8000302:	e0c7      	b.n	8000494 <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<0);
 8000304:	4b66      	ldr	r3, [pc, #408]	; (80004a0 <GPIO_Init+0x1b8>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000308:	4a65      	ldr	r2, [pc, #404]	; (80004a0 <GPIO_Init+0x1b8>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6313      	str	r3, [r2, #48]	; 0x30
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b03      	cmp	r3, #3
 8000314:	d83b      	bhi.n	800038e <GPIO_Init+0xa6>
 8000316:	a201      	add	r2, pc, #4	; (adr r2, 800031c <GPIO_Init+0x34>)
 8000318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031c:	0800032d 	.word	0x0800032d
 8000320:	08000347 	.word	0x08000347
 8000324:	0800035f 	.word	0x0800035f
 8000328:	08000377 	.word	0x08000377
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 800032c:	4b5d      	ldr	r3, [pc, #372]	; (80004a4 <GPIO_Init+0x1bc>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	68ba      	ldr	r2, [r7, #8]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	2103      	movs	r1, #3
 8000336:	fa01 f202 	lsl.w	r2, r1, r2
 800033a:	43d2      	mvns	r2, r2
 800033c:	4611      	mov	r1, r2
 800033e:	4a59      	ldr	r2, [pc, #356]	; (80004a4 <GPIO_Init+0x1bc>)
 8000340:	400b      	ands	r3, r1
 8000342:	6013      	str	r3, [r2, #0]
					break;
 8000344:	e023      	b.n	800038e <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 8000346:	4b57      	ldr	r3, [pc, #348]	; (80004a4 <GPIO_Init+0x1bc>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	0052      	lsls	r2, r2, #1
 800034e:	2101      	movs	r1, #1
 8000350:	fa01 f202 	lsl.w	r2, r1, r2
 8000354:	4611      	mov	r1, r2
 8000356:	4a53      	ldr	r2, [pc, #332]	; (80004a4 <GPIO_Init+0x1bc>)
 8000358:	430b      	orrs	r3, r1
 800035a:	6013      	str	r3, [r2, #0]
					break;
 800035c:	e017      	b.n	800038e <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 800035e:	4b51      	ldr	r3, [pc, #324]	; (80004a4 <GPIO_Init+0x1bc>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	68ba      	ldr	r2, [r7, #8]
 8000364:	0052      	lsls	r2, r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	fa01 f202 	lsl.w	r2, r1, r2
 800036c:	4611      	mov	r1, r2
 800036e:	4a4d      	ldr	r2, [pc, #308]	; (80004a4 <GPIO_Init+0x1bc>)
 8000370:	430b      	orrs	r3, r1
 8000372:	6013      	str	r3, [r2, #0]
					break;
 8000374:	e00b      	b.n	800038e <GPIO_Init+0xa6>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 8000376:	4b4b      	ldr	r3, [pc, #300]	; (80004a4 <GPIO_Init+0x1bc>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	2103      	movs	r1, #3
 8000380:	fa01 f202 	lsl.w	r2, r1, r2
 8000384:	4611      	mov	r1, r2
 8000386:	4a47      	ldr	r2, [pc, #284]	; (80004a4 <GPIO_Init+0x1bc>)
 8000388:	430b      	orrs	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
					break;
 800038c:	bf00      	nop
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d003      	beq.n	800039c <GPIO_Init+0xb4>
 8000394:	683b      	ldr	r3, [r7, #0]
 8000396:	2b01      	cmp	r3, #1
 8000398:	d00c      	beq.n	80003b4 <GPIO_Init+0xcc>
		break;
 800039a:	e07b      	b.n	8000494 <GPIO_Init+0x1ac>
						GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 800039c:	4b41      	ldr	r3, [pc, #260]	; (80004a4 <GPIO_Init+0x1bc>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	2101      	movs	r1, #1
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	43d2      	mvns	r2, r2
 80003aa:	4611      	mov	r1, r2
 80003ac:	4a3d      	ldr	r2, [pc, #244]	; (80004a4 <GPIO_Init+0x1bc>)
 80003ae:	400b      	ands	r3, r1
 80003b0:	6053      	str	r3, [r2, #4]
					break;
 80003b2:	e00a      	b.n	80003ca <GPIO_Init+0xe2>
						GPIOA_OTYPER |= (0x01<<PIN_NO);
 80003b4:	4b3b      	ldr	r3, [pc, #236]	; (80004a4 <GPIO_Init+0x1bc>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	2101      	movs	r1, #1
 80003ba:	68ba      	ldr	r2, [r7, #8]
 80003bc:	fa01 f202 	lsl.w	r2, r1, r2
 80003c0:	4611      	mov	r1, r2
 80003c2:	4a38      	ldr	r2, [pc, #224]	; (80004a4 <GPIO_Init+0x1bc>)
 80003c4:	430b      	orrs	r3, r1
 80003c6:	6053      	str	r3, [r2, #4]
					break;
 80003c8:	bf00      	nop
		break;
 80003ca:	e063      	b.n	8000494 <GPIO_Init+0x1ac>
				RCC_AHB1ENR |= (0x01 <<1);
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <GPIO_Init+0x1b8>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <GPIO_Init+0x1b8>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b03      	cmp	r3, #3
 80003dc:	d83b      	bhi.n	8000456 <GPIO_Init+0x16e>
 80003de:	a201      	add	r2, pc, #4	; (adr r2, 80003e4 <GPIO_Init+0xfc>)
 80003e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e4:	080003f5 	.word	0x080003f5
 80003e8:	0800040f 	.word	0x0800040f
 80003ec:	08000427 	.word	0x08000427
 80003f0:	0800043f 	.word	0x0800043f
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 80003f4:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <GPIO_Init+0x1c0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	68ba      	ldr	r2, [r7, #8]
 80003fa:	0052      	lsls	r2, r2, #1
 80003fc:	2103      	movs	r1, #3
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	43d2      	mvns	r2, r2
 8000404:	4611      	mov	r1, r2
 8000406:	4a28      	ldr	r2, [pc, #160]	; (80004a8 <GPIO_Init+0x1c0>)
 8000408:	400b      	ands	r3, r1
 800040a:	6013      	str	r3, [r2, #0]
					break;
 800040c:	e023      	b.n	8000456 <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 800040e:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <GPIO_Init+0x1c0>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	68ba      	ldr	r2, [r7, #8]
 8000414:	0052      	lsls	r2, r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	fa01 f202 	lsl.w	r2, r1, r2
 800041c:	4611      	mov	r1, r2
 800041e:	4a22      	ldr	r2, [pc, #136]	; (80004a8 <GPIO_Init+0x1c0>)
 8000420:	430b      	orrs	r3, r1
 8000422:	6013      	str	r3, [r2, #0]
					break;
 8000424:	e017      	b.n	8000456 <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 8000426:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <GPIO_Init+0x1c0>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	68ba      	ldr	r2, [r7, #8]
 800042c:	0052      	lsls	r2, r2, #1
 800042e:	2102      	movs	r1, #2
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a1c      	ldr	r2, [pc, #112]	; (80004a8 <GPIO_Init+0x1c0>)
 8000438:	430b      	orrs	r3, r1
 800043a:	6013      	str	r3, [r2, #0]
					break;
 800043c:	e00b      	b.n	8000456 <GPIO_Init+0x16e>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <GPIO_Init+0x1c0>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	68ba      	ldr	r2, [r7, #8]
 8000444:	0052      	lsls	r2, r2, #1
 8000446:	2103      	movs	r1, #3
 8000448:	fa01 f202 	lsl.w	r2, r1, r2
 800044c:	4611      	mov	r1, r2
 800044e:	4a16      	ldr	r2, [pc, #88]	; (80004a8 <GPIO_Init+0x1c0>)
 8000450:	430b      	orrs	r3, r1
 8000452:	6013      	str	r3, [r2, #0]
					break;
 8000454:	bf00      	nop
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d003      	beq.n	8000464 <GPIO_Init+0x17c>
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d00c      	beq.n	800047c <GPIO_Init+0x194>
		break;
 8000462:	e016      	b.n	8000492 <GPIO_Init+0x1aa>
						GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <GPIO_Init+0x1bc>)
 8000466:	685b      	ldr	r3, [r3, #4]
 8000468:	2101      	movs	r1, #1
 800046a:	68ba      	ldr	r2, [r7, #8]
 800046c:	fa01 f202 	lsl.w	r2, r1, r2
 8000470:	43d2      	mvns	r2, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a0b      	ldr	r2, [pc, #44]	; (80004a4 <GPIO_Init+0x1bc>)
 8000476:	400b      	ands	r3, r1
 8000478:	6053      	str	r3, [r2, #4]
					break;
 800047a:	e00a      	b.n	8000492 <GPIO_Init+0x1aa>
						GPIOA_OTYPER |= (0x01<<PIN_NO);
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <GPIO_Init+0x1bc>)
 800047e:	685b      	ldr	r3, [r3, #4]
 8000480:	2101      	movs	r1, #1
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	fa01 f202 	lsl.w	r2, r1, r2
 8000488:	4611      	mov	r1, r2
 800048a:	4a06      	ldr	r2, [pc, #24]	; (80004a4 <GPIO_Init+0x1bc>)
 800048c:	430b      	orrs	r3, r1
 800048e:	6053      	str	r3, [r2, #4]
					break;
 8000490:	bf00      	nop
		break;
 8000492:	bf00      	nop
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40023800 	.word	0x40023800
 80004a4:	40020000 	.word	0x40020000
 80004a8:	40020400 	.word	0x40020400

080004ac <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b087      	sub	sp, #28
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	60b9      	str	r1, [r7, #8]
 80004b6:	607a      	str	r2, [r7, #4]
 80004b8:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch(Port)
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	2b41      	cmp	r3, #65	; 0x41
 80004be:	d002      	beq.n	80004c6 <GPIO_WritePin+0x1a>
 80004c0:	2b42      	cmp	r3, #66	; 0x42
 80004c2:	d029      	beq.n	8000518 <GPIO_WritePin+0x6c>
 80004c4:	e051      	b.n	800056a <GPIO_WritePin+0xbe>
	{
		case('A'):
			if((GPIOA_MODER >> 2*PIN_NO) & 1)
 80004c6:	4b2c      	ldr	r3, [pc, #176]	; (8000578 <GPIO_WritePin+0xcc>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	fa22 f303 	lsr.w	r3, r2, r3
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d01b      	beq.n	8000512 <GPIO_WritePin+0x66>
			{
			     if(Data)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d00a      	beq.n	80004f6 <GPIO_WritePin+0x4a>
			     {
			    	 GPIOA_ODR |= (1<<PIN_NO);
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <GPIO_WritePin+0xcc>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	2101      	movs	r1, #1
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ec:	4611      	mov	r1, r2
 80004ee:	4a22      	ldr	r2, [pc, #136]	; (8000578 <GPIO_WritePin+0xcc>)
 80004f0:	430b      	orrs	r3, r1
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	e00a      	b.n	800050c <GPIO_WritePin+0x60>
			     }
			     else
			     {
			    	 GPIOA_ODR &= ~(1<<PIN_NO);
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <GPIO_WritePin+0xcc>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	2101      	movs	r1, #1
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000502:	43d2      	mvns	r2, r2
 8000504:	4611      	mov	r1, r2
 8000506:	4a1c      	ldr	r2, [pc, #112]	; (8000578 <GPIO_WritePin+0xcc>)
 8000508:	400b      	ands	r3, r1
 800050a:	6153      	str	r3, [r2, #20]
			     }
				result = OK;
 800050c:	2300      	movs	r3, #0
 800050e:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				result = NOK;
			}
		break;
 8000510:	e02b      	b.n	800056a <GPIO_WritePin+0xbe>
				result = NOK;
 8000512:	2301      	movs	r3, #1
 8000514:	75fb      	strb	r3, [r7, #23]
		break;
 8000516:	e028      	b.n	800056a <GPIO_WritePin+0xbe>
		case('B'):
		     if((GPIOA_MODER >> 2*PIN_NO) & 1)
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <GPIO_WritePin+0xcc>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa22 f303 	lsr.w	r3, r2, r3
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01b      	beq.n	8000564 <GPIO_WritePin+0xb8>
		        {
					 if(Data)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00a      	beq.n	8000548 <GPIO_WritePin+0x9c>
					 {
						 GPIOB_ODR |= (1<<PIN_NO);
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <GPIO_WritePin+0xd0>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	2101      	movs	r1, #1
 8000538:	68ba      	ldr	r2, [r7, #8]
 800053a:	fa01 f202 	lsl.w	r2, r1, r2
 800053e:	4611      	mov	r1, r2
 8000540:	4a0e      	ldr	r2, [pc, #56]	; (800057c <GPIO_WritePin+0xd0>)
 8000542:	430b      	orrs	r3, r1
 8000544:	6153      	str	r3, [r2, #20]
 8000546:	e00a      	b.n	800055e <GPIO_WritePin+0xb2>
					 }
					 else
					 {
						 GPIOB_ODR &= ~(1<<PIN_NO);
 8000548:	4b0c      	ldr	r3, [pc, #48]	; (800057c <GPIO_WritePin+0xd0>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	2101      	movs	r1, #1
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	43d2      	mvns	r2, r2
 8000556:	4611      	mov	r1, r2
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <GPIO_WritePin+0xd0>)
 800055a:	400b      	ands	r3, r1
 800055c:	6153      	str	r3, [r2, #20]
					 }
					result = OK;
 800055e:	2300      	movs	r3, #0
 8000560:	75fb      	strb	r3, [r7, #23]
				else
				{
					result = NOK;
				}

		break;
 8000562:	e001      	b.n	8000568 <GPIO_WritePin+0xbc>
					result = NOK;
 8000564:	2301      	movs	r3, #1
 8000566:	75fb      	strb	r3, [r7, #23]
		break;
 8000568:	bf00      	nop

	}// end switch

	return result;
 800056a:	7dfb      	ldrb	r3, [r7, #23]
}
 800056c:	4618      	mov	r0, r3
 800056e:	371c      	adds	r7, #28
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40020000 	.word	0x40020000
 800057c:	40020400 	.word	0x40020400

08000580 <__libc_init_array>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	4d0d      	ldr	r5, [pc, #52]	; (80005b8 <__libc_init_array+0x38>)
 8000584:	4c0d      	ldr	r4, [pc, #52]	; (80005bc <__libc_init_array+0x3c>)
 8000586:	1b64      	subs	r4, r4, r5
 8000588:	10a4      	asrs	r4, r4, #2
 800058a:	2600      	movs	r6, #0
 800058c:	42a6      	cmp	r6, r4
 800058e:	d109      	bne.n	80005a4 <__libc_init_array+0x24>
 8000590:	4d0b      	ldr	r5, [pc, #44]	; (80005c0 <__libc_init_array+0x40>)
 8000592:	4c0c      	ldr	r4, [pc, #48]	; (80005c4 <__libc_init_array+0x44>)
 8000594:	f000 f818 	bl	80005c8 <_init>
 8000598:	1b64      	subs	r4, r4, r5
 800059a:	10a4      	asrs	r4, r4, #2
 800059c:	2600      	movs	r6, #0
 800059e:	42a6      	cmp	r6, r4
 80005a0:	d105      	bne.n	80005ae <__libc_init_array+0x2e>
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a8:	4798      	blx	r3
 80005aa:	3601      	adds	r6, #1
 80005ac:	e7ee      	b.n	800058c <__libc_init_array+0xc>
 80005ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80005b2:	4798      	blx	r3
 80005b4:	3601      	adds	r6, #1
 80005b6:	e7f2      	b.n	800059e <__libc_init_array+0x1e>
 80005b8:	080005e0 	.word	0x080005e0
 80005bc:	080005e0 	.word	0x080005e0
 80005c0:	080005e0 	.word	0x080005e0
 80005c4:	080005e4 	.word	0x080005e4

080005c8 <_init>:
 80005c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ca:	bf00      	nop
 80005cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ce:	bc08      	pop	{r3}
 80005d0:	469e      	mov	lr, r3
 80005d2:	4770      	bx	lr

080005d4 <_fini>:
 80005d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d6:	bf00      	nop
 80005d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005da:	bc08      	pop	{r3}
 80005dc:	469e      	mov	lr, r3
 80005de:	4770      	bx	lr
